# moda-ci.yaml
# CI pipeline for deploying, testing, and analyzing the docs project.
# Contact @Djubz for workflow questions.
# This workflow uses AWS, Docker, Azure, and various code quality/security analysis actions.

name: docs-internal Moda CI

on:
  pull_request:
    branches:
      - main
  push:
    branches-ignore:
      - 'gh-readonly-queue/**'
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  # Add others only if required (e.g., id-token, attestations)

jobs:
  deploy-aws-redis:
    name: Deploy Amazon Redis DB cluster (ElastiCache)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy Redis with Bitovi Action
        uses: bitovi/github-actions-deploy-redis-db@v0 # Pin to latest stable tag
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # aws_default_region: us-east-1 # Uncomment to override default region
          # aws_redis_user: redisuser # Using default, omit if not overriding
          # aws_redis_port: 6379 # Using default, omit if not overriding
          # aws_redis_multi_az_enabled: false # Enable for HA in production
          # tf_stack_destroy: # Leave blank to avoid accidental deletions
          # Add other parameters only as needed, and document why

  build-and-test:
    name: Build, Test, and Analyze (Node.js)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x] # Extendable to multiple versions for testing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3.9.1
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Install Dependencies
        run: npm install

      - name: Run Lint & Tests
        run: |
          npm run lint
          npm test

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: build-artifact
          path: dist/
          retention-days: 7
          if-no-files-found: error

      - name: Download Build Artifact (Example)
        uses: actions/download-artifact@v4.3.0
        with:
          name: build-artifact
          path: ./downloaded-artifact

  docker-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Docker Build Tag Publish to ECR
        uses: bitovi/github-actions-docker-ecr-publish@v0.1.0
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_ecr_repo_name: my-ecr-repo
          image_tag: ${{ github.sha }}

  # Example: Security Analysis (with secrets and clear explanation)
  security-analysis:
    name: SecureStack Application Composition Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SecureStack Analysis
        uses: SecureStackCo/actions-code@v0.1.1
        with:
          securestack_api_key: ${{ secrets.SECURESTACK_API_KEY }}
          securestack_app_id: ${{ secrets.SECURESTACK_APP_ID }}
          severity: high

  # Add more jobs as needed, using matrix strategy for repetitive tasks

# Inline documentation for future maintainers:
# - Only include parameters you wish to override from action defaults.
# - Use GitHub secrets for sensitive fields.
# - Expand matrix strategy on jobs (e.g., for multi-version or multi-platform testing).
# - Use explicit names/paths for artifacts.
# - Add or remove permissions as needed; start with least privilege.
# - Use `workflow_dispatch` for manual runs.
# - Add or adjust triggers as your team/process evolves.
